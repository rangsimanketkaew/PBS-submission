#!/bin/csh

# Molpro 2015 Interactive Job Submission on TAIWANIA cluster, NCHC, Taiwan
#
# Updated 20180906  Rangsiman Ketkaew  rangsiman1993@gmail.com
# https://github.com/rangsimanketkaew/QM-on-TAIWANIA/

##############################################################
set MOLPRO_VER = "2015"
set MOLPRO     = "/pkg/molpro/bin"
set MOLPRO_EXE = "$MOLPRO/molpro"
##############################################################
set PROJ_ID_FILE = "$HOME/.proj_id"
##############################################################

onintr inter

if ( "$1" == "-help" || "$1" == "--help" || "$1" == "-h" || "$1" == "help" ) goto help

if ($#argv == 0) then
  echo ""
  echo "   Molpro $MOLPRO_VER Interactive Job Submission on TAIWANIA, NCHC, Taiwan"
  echo "   ----------------------------------------------------------------"
  echo ""
  echo "   Usage: submolpro [PPN] input[.com] [output[.out]] [-help]"
  echo ""
  echo "   Example: submolpro ccsd-water.com"
  echo "            submolpro 16 ccsd-water.com ccsd-water.out"
  echo ""
  exit 0
endif


if (! -e $MOLPRO) then
  echo 'Error: Unable to locate Molpro top directory, please check $MOLPRO environment variable'
  exit 1
endif

if (! -e $MOLPRO_EXE) then
  echo 'Error: Unable to locate "molpro" executable, please check $MOLPRO_EXE environment variable'
  exit 1
endif

if ($#argv == 1) then
  set PPN = 1
  set INPUTFILE = "$1"
  set OUTPUTFILE = 0
  goto check_input
endif

if ($#argv == 2) then
  if ( `echo $1 | grep -c '[a-zA-Z]'` == 1 ) then
    set PPN = 1
    set INPUTFILE = "$1"
    set OUTPUTFILE = "$2"
    goto check_input
  else
    set PPN = "$1"
    set INPUTFILE = "$2"
    set OUTPUTFILE = 0
    goto check_input
  endif
endif

if ($#argv == 3) then
  if ( `echo $1 | grep -c '[a-zA-Z]'` == 1 ) then
    echo "Error: the number of MPI process must be positive integer. Max value is 40."
    exit 1
  else
    set PPN = "$1"
    set INPUTFILE = "$2"
    set OUTPUTFILE = "$3"
    goto check_input
  endif
endif

if ($#argv > 3) then
  echo "Error: Unable to recognize $4 command."
  exit 1
endif

check_input:
set INPUTNAME = `basename $INPUTFILE .com`
set REALNAME = "$INPUTNAME".com
set REALPATH = `realpath $REALNAME`
set DIR_PATH = `dirname $REALPATH`
set INPUTFILE = "$DIR_PATH/$INPUTNAME".com
if (! -f $INPUTFILE) then
  echo "Error: Unable to locate $INPUTFILE"
  exit 1
endif

if ("null$OUTPUTFILE" == "null0") then
  set OUTPUTNAME = "$INPUTNAME"
  set OUTPUTFILE = "$DIR_PATH/$INPUTNAME".out
else
  set OUTPUTNAME = `basename $OUTPUTFILE .out`
  set OUTPUTFILE = "$DIR_PATH/$OUTPUTNAME".out
endif

echo ""

check_argv:
if ($PPN > 40 ) then
  echo "Warning: Value of PPN you assigned is over 40. Thus, PPN will be set to 40 automatically."
  set PPN = 40
else if ($PPN < 1 ) then
  echo "Error: the number of PPN must be positive integer. Max value is 40."
  exit 1
endif

if ($PPN == 1) then
  set PPN = 1
  set JOBQUEUE = serial
  goto check_resource
endif

check_queue:
echo ""
echo "Optimal queues:  ctest (30 mins) [1]"
echo "                 cf40  (96 hrs)  [2]"
echo ""

if ($PPN >= 2 && $PPN <= 40) then
  echo -n "Enter job queue [2]: "
  set INPQUEUE = "$<"
endif

if ("null$INPQUEUE" == "null" || $INPQUEUE == 2) then
  set JOBQUEUE = cf40
else if ($INPQUEUE == 1) then
  set JOBQUEUE = ctest
else
  echo "Error: Your choice is incorrect."
  goto check_queue
endif

check_resource:
set NODES = 1
set CPUS = "$PPN"
set THREADS = 1

set JOBNAME = "$OUTPUTNAME"

set LISTID = ( `get_su_balance | awk -F, '{print $2}' | xargs` )

if ( "$LISTID" == "" ) then
  echo "Error: No available Project ID."
  exit 1
else if ( $#LISTID == 1 ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( -f $PROJ_ID_FILE ) then
  set PROJID_1 = `head -1 $PROJ_ID_FILE`
  if ( `get_su_balance | grep -wc "$PROJID_1"` == 0 ) then
    echo "Error: Project ID specified in first line of $PROJ_ID_FILE is not correct."
    exit 1
  endif
  set PROJ_ID = "$PROJID_1"
  goto jobinfo
endif

set BALANCE = ( `get_su_balance | awk -F, '{print $1}' | xargs` )
echo ""
echo " Your available Project ID & SU Balance:"
@ i = 1
while ( $i <= $#LISTID )
echo " [$i]  $LISTID[$i]  $BALANCE[$i]"
set PROJ_ID = "$LISTID[1]"
@ i++
end
echo ""

ask_id_choice:
echo -n "Enter Project ID [1]: "
set PROJINP = "$<"

if ( "null$PROJINP" == "null" ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( `echo $PROJINP | grep -c '[a-z][A-Z]*'` == 1 ) then
  echo "Error: Please assign choice as positive integer."
  goto ask_id_choice
endif

if ( $PROJINP > $#LISTID || $PROJINP <= 0 ) then
  echo "Error: Choice you selected is out of range."
  goto ask_id_choice
else
  set PROJ_ID = "$LISTID[$PROJINP]"
endif

jobinfo:

#####################################################
# Show all info before submitting job
#####################################################

echo ""
echo "     ----- Job Info -----"
echo ""
echo "  Molpro root  :  $MOLPRO"
echo '   Executable  :  $MOLPRO/molpro'
echo "   Input file  :  $INPUTFILE"
echo "  Output file  :  $OUTPUTFILE"
echo " Compute node  :  $NODES"
echo "    CPU cores  :  $CPUS"
echo "MPI processes  :  $PPN"
echo "  OMP Threads  :  $THREADS"
echo "     Job Name  :  $JOBNAME"
echo "    Job Queue  :  $JOBQUEUE"   
echo "   Project ID  :  $PROJ_ID"
echo ""

echo -n "Submit your job now ? [yes]: "
set SUBMIT = "$<"
if ("null$SUBMIT" == "null" || "null$SUBMIT" == "nully" || "null$SUBMIT" == "nullyes") then
  goto submit
else
  echo "...Quit..."
  exit 0
endif

submit:
set PBS_SCRIPT = "$DIR_PATH/submit.MOLPRO.$OUTPUTNAME.sh"

cat <<EOF > $PBS_SCRIPT
#!/bin/bash 

#PBS -l select=${NODES}:ncpus=${CPUS}:mpiprocs=${PPN}:ompthreads=${THREADS}
#PBS -q $JOBQUEUE
#PBS -N $JOBNAME
#PBS -P $PROJ_ID

################################################################
#### This PBS Pro script was generated by submolpro program ####
################################################################

module purge
module load intel/2018_u1

cd \$PBS_O_WORKDIR

export SCRATCH_DIR=/work1/$USER/SCRATCH/molpro/molpro.pbs\${PBS_JOBID/\.srvc1/}
if [ ! -d \$SCRATCH_DIR ]; then mkdir -p \$SCRATCH_DIR; fi

export MOLPRO_EXE="$MOLPRO_EXE"
export INPUT="$INPUTFILE"
export OUTPUT="$OUTPUTFILE"

\$MOLPRO_EXE -n $PPN -d \$SCRATCH_DIR \$INPUT -o \$OUTPUT

EOF

qsub $PBS_SCRIPT
#echo "Your job has been submitted."
exit 0

inter: 
  echo ""
  echo "Error: you pressed Ctrl+C ...Quit..."
  echo ""
  exit 1

help:
clear
cat << EOF | less

                                 ---------------------------------
                                 Molpro Interactive Job Submission
                                 ---------------------------------

=========
submolpro
=========

submolpro is used to submit Molpro calculation in parallel mode on a cluster. 


======
MANUAL
======

Molpro manual can be found at https://www.molpro.net/info/2015.1/doc/manual/


======
AUTHOR
======

Rangsiman Ketkaew (MSc student)
E-mail: rangsiman1993@gmail.com
Computational Chemistry Research Unit
Department of Chemistry
Faculty of Science and Technology
Thammasat University, Thailand

EOF

