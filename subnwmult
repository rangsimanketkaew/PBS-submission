#!/bin/csh -f

# Multiple NWChem Interactive Job Submission on TAIWANIA cluster, NCHC, Taiwan.
# 
# Updated 20180623  Rangsiman Ketkaew  rangsiman1993@gmail.com
# https://github.com/rangsimanketkaew/QM-on-TAIWANIA/

################################################################
set NWCHEM_VER = "6.8.0"
set NWCHEM_TOP = "/pkg/nwchem/Casper/i18gcc6/nwchem-6.8.1-fixmrcc"
################################################################
set NWCHEM_TARGET = "LINUX64"
set NWCHEM_EXE = "$NWCHEM_TOP/bin/$NWCHEM_TARGET/nwchem"
set NWCHEM_RESRC = "/pkg/nwchem/etc/default.nwchemrc"
################################################################
set PROJ_ID_FILE = "$HOME/.proj_id"
################################################################

if ("$1" == "-help" || "$1" == "--help" || "$1" == "-h" || "$1" == "help") goto help

if ($#argv == 0) then

echo ""
echo "  Multiple NWChem $NWCHEM_VER Interactive Job Submission on TAIWANIA, NCHC, Taiwan"
echo "  --------------------------------------------------------------------------"
echo ""
echo "  Usage: subnwmult inp_1.nw [inp_2.nw | inp_3.nw | ... | inp_10.nw] [-help]"
echo ""

exit 0

endif

if (! -f $NWCHEM_EXE) then
  echo 'Error: Unable to locate "nwchem" executable in $NWCHEM_TOP/bin/$NWCHEM_TARGET/ directory.'
  exit 1
endif

set INPUTSUB = ( $argv[*] )
set NUM = "$#INPUTSUB"
if ($NUM > 10) then
  echo "Error: The upper limit of input file is 10."
  exit 1
endif
echo "|"
echo "| Check list if submitted $NUM files exist"

set ERRORLIST = ""
@ i = 1
while ($i <= $NUM)
  set INPUTFILE  = "$INPUTSUB[$i]"
  if ( -f $INPUTFILE) then
    echo "| [/]  $i.  $INPUTSUB[$i]"
  else
    echo "| [x]  $i.  $INPUTSUB[$i]"
    set ERRORLIST = "$ERRORLIST $i"
  endif
@ i ++
end

if ( "$ERRORLIST" != "" ) then
  echo "|"
  echo "| Error: Files no.$ERRORLIST do not exist."
  exit 1
endif

  echo "|"
  echo "| ======== Job Queue and Server Policy ======="
#  echo '|\
  echo '| Queue    max.Node    max.CPU    max.Walltime\
| -----    --------    -------    ------------\
| serial   1           1          96:00:00 \
| ctest    2           80         00:30:00 \
| cf40     1           40         96:00:00 \
| cf160    4           80         96:00:00 \
| ct400    10          400        96:00:00 \
| ct800    20          800        72:00:00 \
| cf1200   30          1200       48:00:00 \
| ct2k     50          2000       48:00:00 \
| ct6k     150         6000       24:00:00 \
| ct8k     200         8000       24:00:00'
  echo "|"

  echo -n "| Enter Compute node: "
  set JOBNODE = "$<"
  echo -n "| Enter CPU cores: "
  set JOBCPU = "$<"
  set JOBMPI = "$JOBCPU"
  set JOBTHREAD = 1
  echo -n "| Enter job queue: "
  set JOBQUEUE = "$<"

set LISTID = ( `get_su_balance | awk -F, '{print $2}' | xargs` )

if ( "$LISTID" == "" ) then
  echo "| Error: No available Project ID."
  exit 1
else if ( $#LISTID == 1 ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( -f $PROJ_ID_FILE ) then
  set PROJID_1 = `head -1 $PROJ_ID_FILE`
  if ( `get_su_balance | grep -wc "$PROJID_1"` == 0 ) then
    echo "| Error: Project ID specified in first line of $PROJ_ID_FILE is not correct."
    exit 1
  endif
  set PROJ_ID = "$PROJID_1"
  goto jobinfo
endif

set BALANCE = ( `get_su_balance | awk -F, '{print $1}' | xargs` )
echo "|"
echo "| Your available Project ID & SU Balance:"
@ i = 1
while ( $i <= $#LISTID )
echo "| [$i]  $LISTID[$i]  $BALANCE[$i]"
set PROJ_ID = "$LISTID[1]"
@ i++
end
echo "|"

ask_id_choice:
echo -n "| Enter Project ID [1]: "
set PROJINP = "$<"

if ( "null$PROJINP" == "null" ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( `echo $PROJINP | grep -c '[a-z][A-Z]*'` == 1 ) then
  echo "| Error: Please assign choice as positive integer."
  goto ask_id_choice
endif

if ( $PROJINP > $#LISTID || $PROJINP <= 0 ) then
  echo "| Error: Choice you selected is out of range."
  goto ask_id_choice
else
  set PROJ_ID = "$LISTID[$PROJINP]"
endif

jobinfo:

echo "|"
echo "| -------- Job Information --------"
echo "|"
echo "| Compute node     = $JOBNODE"
echo "| CPU cores        = $JOBCPU (per node)"
echo "| MPI process      = $JOBMPI (per node)"
echo "| OMP THREADS      = $JOBTHREAD (per MPI process)"
echo "| Job Queue        = $JOBQUEUE"
echo "| Project ID       = $PROJ_ID"
echo "|"

@ TOTALMPI = ($JOBNODE * $JOBMPI)
echo -n "| If all parameters are correct, enter to continue: "
set CONFIRM = "$<"
if ("null$CONFIRM" != "null") exit 1

#---Start loop
echo "|"
@ i = 1
while ($i <= $NUM)
input:
  set INPUTFILE  = "$INPUTSUB[$i]"
  set FILENAME = `basename $INPUTFILE .nw`
  set OUTPUTFILE = "$FILENAME".out
  set JOBINPUT = "$INPUTFILE"
  set JOBOUTPUT = "$OUTPUTFILE"
  set JOBNAME = "$FILENAME"
  set PBS_SCRIPT = "submit.NWChem.$FILENAME.sh"

cat <<EOF > $PBS_SCRIPT
#!/bin/bash

#PBS -l select=${JOBNODE}:ncpus=${JOBCPU}:mpiprocs=${JOBMPI}:ompthreads=${JOBTHREAD}
#PBS -q $JOBQUEUE
#PBS -N $JOBNAME
#PBS -P $PROJ_ID

################################################################
#### This PBS Pro script was generated by subnwmult program ####
################################################################

module purge
module load intel/2018_u1 cuda/8.0.61 gcc/6.3.0

cd \$PBS_O_WORKDIR

ulimit -c 0
ulimit -s unlimited

export SCRATCH_DIR=/work1/$USER/SCRATCH/nwchem/nwchem.pbs\${PBS_JOBID/\.srvc1/}
if [ ! -d \$SCRATCH_DIR ]; then mkdir -p \$SCRATCH_DIR; fi

export I_MPI_FABRICS=shm:tmi
export I_MPI_PIN_DOMAIN=omp
export I_MPI_HYDRA_BRANCH_COUNT=-1
export I_MPI_HYDRA_PMI_CONNECT=alltoall

export MPI_ROOT=\$I_MPI_ROOT/intel64
export MPICC=\$MPI_ROOT/bin/mpiicc
export MPICXX=\$MPI_ROOT/bin/mpiicpc
export MPIFC=\$MPI_ROOT/bin/mpiifort

export NWCHEM_EXE=$NWCHEM_EXE
export NWCHEM_TARGET="LINUX64"
export NWCHEM_RESRC="$NWCHEM_RESRC"

if [ ! -f ~/.nwchemrc ]; then ln -s \$NWCHEM_RESRC ~/.nwchemrc; fi

export MACHLIST=\$PBS_O_WORKDIR/nodelist.\${PBS_JOBID/\.srvc1/}

mpiexec.hydra -PSM2 -n $TOTALMPI \
\$NWCHEM_EXE \
$JOBINPUT > \
$JOBOUTPUT

EOF

  qsub $PBS_SCRIPT
@ i ++
end

echo "| "

help:
clear
cat << EOF | less

                                -------------------------------------------
                                Multiple NWChem Interactive Jobs Submission
                                -------------------------------------------

=========
subnwmult
=========

Multiple NWChem $NWCHEM_VER Job Submissions on TAIWANIA cluster, NCHC, Taiwan.

 - Max number of input files is 10.
 - Interactive Job PBS Professional supported.
 - ARMCI Casper, MPIPR, and GPU/CUDA are not supported yet at this time.

Basename of input file will be used to name the output file. For example, nwchem.nw --> nwchem.out

Existing output file whose basename is similar to name of submitting input will be overwritten.


======
AUTHOR
======

Rangsiman Ketkaew (MSc student)
E-mail: rangsiman1993@gmail.com
Computational Chemistry Research Unit
Department of Chemistry
Faculty of Science and Technology
Thammasat University, Thailand

EOF
