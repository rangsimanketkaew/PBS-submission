#!/bin/csh

# Q-Chem 4.2.2 Interactive PBS Pro Job Submission
# on Taiwania cluster, NCHC, Taiwan
#
# Support only OpenMP parallel method
#
# Updated 20180622  Rangsiman Ketkaew  rangsiman1993@gmail.com
# https://github.com/rangsimanketkaew/PBS-submission/

##############################################################
set QC         = /pkg/qchem/qc42.mpich
set QCAUX      = $QC/qcaux/
set QCRSH      = ssh
set QCPLATFORM = LINUX_Ix86_64
##############################################################
set PROJ_ID_FILE = "$HOME/.proj_id"
##############################################################

set NODES = 1   #OpenMP

onintr inter

# no command line argument
if ($#argv == 0) then
  echo ""
  echo "   Q-Chem 4.2.2 Interactive PBS Job Submission on TAIWANIA, NCHC, Taiwan"
  echo "   ---------------------------------------------------------------------"
  echo ""
  echo "   Usage: subqchem [thread] input [output]"
  echo ""
  echo "                       |      |      |"
  echo "   Number of thread <--|      |      |--> Output uses basename of input file."
  echo "    (Default is 1)            | "
  echo "                              |--> Input file with or without .in extension."
  echo ""
  echo "   Example: subqchem 16 water-opt.in                      (16 cores)" 
  echo "            subqchem water-opt.in water-opt-tight.out     (serial run)"
  echo ""
  echo "   Parallelizability of Q-Chem that run in parallel with shared-memory (OpenMP)"
  echo "   is better than that of non-shared memory (MPI)."
  echo ""
  echo "   This script supports the Q-Chem PBS job submission with only OpenMP."
  echo "   If you want to use Q-Chem + MPI, talk to TAIWANIA staff."
  echo ""
  exit 0
endif

# check QC top directory
if (! -e $QC) then
  echo 'Error: Unable to locate Q-Chem top directory, please set $QC environment variable'
  exit 1
endif

if (! -e $QCAUX) then
  echo 'Error: Unable to locate Q-Chem Auxiliary files, please set $QCAUX environment variable'
  exit 1
endif

# subqchem input
if ($#argv == 1) then
  set CPUS = 1
  set INPUTFILE = "$1"
  set OUTPUTFILE = 0
  goto check_input
endif

if ($#argv == 2) then
# subqchem input output
  if ( `echo $1 | grep -c '[a-zA-Z]'` == 1 ) then
    set CPUS = 1
    set INPUTFILE = "$1"
    set OUTPUTFILE = "$2"
    goto check_input
# subqchem thread input
  else
    set CPUS = "$1"
    set INPUTFILE = "$2"
    set OUTPUTFILE = 0
    goto check_input
  endif
endif

# subqchem thread input output
if ($#argv == 3) then
  if ( `echo $1 | grep -c '[a-zA-Z]'` == 1 ) then
    echo "Error: the number of OMP Threads must be positive integer. Max value is 40 threads."
    exit 1
  else
    set CPUS = "$1"
    set INPUTFILE = "$2"
    set OUTPUTFILE = "$3"
    goto check_input
  endif
endif

if ($#argv > 3) then
  echo "Error: Unable to recognize $4 command. Please assign only [number of threads] input and [output]."
  exit 1
endif

#check input
check_input:
set INPUTNAME = `basename $INPUTFILE .in`
set REALNAME = "$INPUTNAME".in
set REALPATH = `realpath $REALNAME`
set FULLPATH = `dirname $REALPATH`
set INPUTFILE = "$FULLPATH/$INPUTNAME".in
if (! -f $INPUTFILE) then
  echo "Error: Unable to locate $INPUTFILE"
  exit 1
endif

#check output
if ("null$OUTPUTFILE" == "null0") then
  set OUTPUTFILE = "$FULLPATH/$INPUTNAME".out
else
  set OUTPUTNAME = `basename $OUTPUTFILE .out`
  set OUTPUTFILE = "$FULLPATH/$OUTPUTNAME".out
endif

echo ""

check_argv:
#check how many sub-jobs
if (`grep -c '@@@' $INPUTFILE` >= 1) then
  @ NUMJOBS = ( `grep -c '@@@' $INPUTFILE` + 1 )
  echo "Warning: $REALNAME contains $NUMJOBS calculations."
endif

#check cpu cores
if ($CPUS > 40 ) then
  echo "Warning: Value of threads you assigned is over 40. Thus, threads will be set to 40 automatically."
  set CPUS = 40
else if ($CPUS < 1 ) then
  echo "Error: the number of OMP Threads must be positive integer. Max value is 40 threads."
  exit 1
endif

if ($CPUS == 1) then
  set CPUS = 1
  set JOBQUEUE = serial
  set WALLTIME = "96:00:00"
  goto check_resource
endif

check_queue:

echo ""
echo "Optimal queues:  ctest (30 mins) [1]"
echo "                 cf40  (96 hrs)  [2]"
echo ""

if ($CPUS >= 2 && $CPUS <= 40) then
  echo -n "Enter job queue [2]: "
  set INPQUEUE = "$<"
endif

if ("null$INPQUEUE" == "null" || $INPQUEUE == 2) then
  set JOBQUEUE = cf40
  set WALLTIME = "96:00:00"
else if ($INPQUEUE == 1) then
  set JOBQUEUE = ctest
  set WALLTIME = "00:30:00"
else
  echo "Error: Your choice is incorrect."
  goto check_queue
endif

check_resource:
#Best threads per core with this Intel Xeon is 1.
set THREADS = "$CPUS"

set JOBNAME = "$INPUTNAME"

set LISTID = ( `get_su_balance | awk -F, '{print $2}' | xargs` )

if ( "$LISTID" == "" ) then
  echo "Error: No available Project ID."
  exit 1
else if ( $#LISTID == 1 ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( -f $PROJ_ID_FILE ) then
  set PROJID_1 = `head -1 $PROJ_ID_FILE`
  if ( `get_su_balance | grep -wc "$PROJID_1"` == 0 ) then
    echo "Error: Project ID specified in first line of $PROJ_ID_FILE is not correct."
    exit 1
  endif
  set PROJ_ID = "$PROJID_1"
  goto jobinfo
endif

set BALANCE = ( `get_su_balance | awk -F, '{print $1}' | xargs` )
echo ""
echo " Your available Project ID & SU Balance:"
@ i = 1
while ( $i <= $#LISTID )
echo " [$i]  $LISTID[$i]  $BALANCE[$i]"
set PROJ_ID = "$LISTID[1]"
@ i++
end
echo ""

ask_id_choice:
echo -n "Enter Project ID [1]: "
set PROJINP = "$<"

if ( "null$PROJINP" == "null" ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( `echo $PROJINP | grep -c '[a-z][A-Z]*'` == 1 ) then
  echo "Error: Please assign choice as positive integer."
  goto ask_id_choice
endif

if ( $PROJINP > $#LISTID || $PROJINP <= 0 ) then
  echo "Error: Choice you selected is out of range."
  goto ask_id_choice
else
  set PROJ_ID = "$LISTID[$PROJINP]"
endif

jobinfo:

#####################################################
# Show all info before submitting job
#####################################################

echo ""
echo "     ----- Job Info -----"
echo ""
echo "  Q-Chem root  :  $QC"
echo '   Executable  :  $QC/exe/qcprog.exe'
echo "   Input file  :  $INPUTFILE"
echo "  Output file  :  $OUTPUTFILE"
echo " Compute node  :  $NODES"
echo "    CPU cores  :  $CPUS"
echo "  OMP Threads  :  $THREADS"
echo "     Job Name  :  $JOBNAME"
echo "    Job Queue  :  $JOBQUEUE"   
echo "    Wall-Time  :  $WALLTIME"
echo "   Project ID  :  $PROJ_ID"
echo ""

echo -n "Submit your job now ? [yes]: "
set SUBMIT = "$<"
if ("null$SUBMIT" == "null" || "null$SUBMIT" == "nully" || "null$SUBMIT" == "nullyes") then
  goto submit
else
  echo "...Quit..."
  exit 0
endif

submit:
set PBS_SCRIPT = "$FULLPATH/submit.QC.$INPUTNAME.sh"

cat <<EOF > $PBS_SCRIPT
#!/bin/bash 

#PBS -l select=${NODES}:ncpus=${CPUS}:ompthreads=${THREADS}
#PBS -l walltime=$WALLTIME
#PBS -q $JOBQUEUE
#PBS -N $JOBNAME
#PBS -P $PROJ_ID

###############################################################
#### This PBS Pro script was generated by subqchem program ####
###############################################################

module load intel/2018_u1

cd \$PBS_O_WORKDIR

export SCRATCH_DIR=/work1/$USER/SCRATCH/qchem/qchem.pbs\${PBS_JOBID/\.srvc1/}
if [ ! -d \$SCRATCH_DIR ]; then mkdir -p \$SCRATCH_DIR; fi

export QC=$QC
export QCAUX=$QCAUX
export QCSCRATCH=\$SCRATCH_DIR
export QCRSH=$QCRSH
export QCPLATFORM=$QCPLATFORM
export QCHEMRUN=\$QC/bin/qchem
export QCTHREADS=$THREADS
export OMP_NUM_THREADS=$THREADS

\$QCHEMRUN -nt $THREADS $INPUTFILE $OUTPUTFILE

EOF

qsub $PBS_SCRIPT
#echo "Your job has been submitted."
exit 0

inter: 
  echo ""
  echo "Error: you pressed Ctrl+C ...Quit..."
  echo ""
  exit 1

