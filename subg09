#!/bin/csh

# Gaussian 09 Interactive PBS Pro Job Submission
# on Taiwania cluster, NCHC, Taiwan
#
# Support only OpenMP parallel method
#
# Updated 20180622  Rangsiman Ketkaew  rangsiman1993@gmail.com
# https://github.com/rangsimanketkaew/PBS-submission/

##############################################################
set PROJ_ID_FILE = "$HOME/.proj_id"
##############################################################

onintr inter

if ( $#argv == 0) then
  echo ""
  echo "   Gaussian 09 Revision E01 Interactive PBS Job Submission on TAIWANIA, NCHC, Taiwan"
  echo "   ---------------------------------------------------------------------------------\n"
  echo "   Usage: subg09 input [output]\n"
  echo "                   |"
  echo "                   |-> input file with or without .com extension.\n"
  echo "   Example: subg09 water_hf"
  echo "            subg09 water_hf.com water_hf_4cores.out\n"
  echo "   If no output specified, basename of input will be used to name output file automatically.\n"
  echo "   This G09 runtime supports only OpenMP (shared-memory) parallel method."
  echo "   This program recognizes the OMP threads from the value of %nprocs line in input."
  echo "   Max %nprocs is 40 and sensible value of %nprocs are: 1, 2, 4, 8, 12, 16, 24, 32, and 36.\n"
  echo "   Warning: If %nprocs is set to 1, G09 job will be submitted in serial queue."
  echo "            If %nprocs is 2 through 40, G09 job will be submitted in cf40 queue instead.\n"
  echo "   PBS bash shell script of cf40 queue is freely adjustable for other purpose."
  echo "   GP-GPU/CUDA is not now supported in Gaussian 09."
  echo ""
  exit 0
else
  set INPUTFILE = "$1"
endif

set INPUTNAME = `basename $INPUTFILE .com`
set REALNAME = "$INPUTNAME".com
set REALPATH = `realpath $REALNAME`
set FULLPATH = `dirname $REALPATH`
set INPUTFILE = "$FULLPATH/$INPUTNAME".com
if (! -f $INPUTFILE) then
  echo "Error: Unable to locate $INPUTFILE"
  exit 1
endif

set JOBNAME = "$INPUTNAME"

if ("null$2" == "null") then
  set OUTPUTFILE = "$FULLPATH/$INPUTNAME".out 
else
  set OUTPUTNAME = `basename $2 .out`
  set OUTPUTFILE = "$FULLPATH/$OUTPUTNAME".out
endif 

if ( `grep -ic '%gpucpu' $INPUTFILE` == 1 ) then
  echo "Error: GPU accelerator is not supported in Gaussian 09, please use Gaussian 16 instead."
  exit 1
else

if ( `grep -ic '\-\-link1\-\-' $INPUTFILE` >= 1 ) then
  @ NUMJOB = ( `grep -ic '\-\-link1\-\-' $INPUTFILE` + 1 )
  echo ""
  echo "Warning: $INPUTNAME.com contains $NUMJOB calculations."
endif

if ( `grep -ic '%nprocshared' $INPUTFILE` >= 1 ) then
  set GREPPAT = "%nprocshared"
else if ( `grep -ic '%nprocs' $INPUTFILE` >= 1 ) then
  set GREPPAT = "%nprocs"
else
  echo ""
  echo "Warning: Processors/cores is set to 1."
  set NPROCS = 1
  set JOBQUEUE = serial
  set WALLTIME = "96:00:00"
  goto set_node
endif

set NPROCS_LIST = ( `grep -i "$GREPPAT" $INPUTFILE | cut -d= -f2` )

set NPROCS = "$NPROCS_LIST[1]"

if ( `echo $NPROCS | grep -c '[a-z][A-Z]'` == 1 ) then
  echo "Error: Number of $GREPPAT specified in input must be positive integer from 1 to 40."
  exit 1
endif

if ( $NPROCS >= 41 ) then
   echo ""
   echo "Warning: Value of $GREPPAT is over 40. So $GREPPAT will be set to 40."
   set NPROCS = 40
endif

if ("null$NPROCS" == "null1") then
  set JOBQUEUE = serial
  set WALLTIME = "96:00:00"
else if ($NPROCS >= 2) then
  set JOBQUEUE = cf40
  set WALLTIME = "96:00:00"
endif

set_node:
set NODES = 1
set THREADS = "$NPROCS"

set LISTID = ( `get_su_balance | awk -F, '{print $2}' | xargs` )

if ( "$LISTID" == "" ) then
  echo "Error: No available Project ID."
  exit 1
else if ( $#LISTID == 1 ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( -f $PROJ_ID_FILE ) then
  set PROJID_1 = `head -1 $PROJ_ID_FILE`
  if ( `get_su_balance | grep -wc "$PROJID_1"` == 0 ) then
    echo "Error: Project ID specified in first line of $PROJ_ID_FILE is not correct."
    exit 1
  endif
  set PROJ_ID = "$PROJID_1"
  goto jobinfo
endif

set BALANCE = ( `get_su_balance | awk -F, '{print $1}' | xargs` )
echo ""
echo " Your available Project ID & SU Balance:"
@ i = 1
while ( $i <= $#LISTID )
echo " [$i]  $LISTID[$i]  $BALANCE[$i]"
set PROJ_ID = "$LISTID[1]"
@ i++
end
echo ""

ask_id_choice:
echo -n "Enter Project ID choice [1]: "
set PROJINP = "$<"
set PROJINP_C = `echo $PROJINP | grep -c '[a-z][A-Z]*'`

if ( $PROJINP_C == 1 ) then
  echo "Error: Please assign choice as positive integer."
  goto ask_id_choice
endif

if ( $PROJINP > $#LISTID || $PROJINP <= 0 ) then
  echo "Error: Choice you selected is out of range."
  goto ask_id_choice
endif

if ( "null$PROJINP" == "null" ) then
  set PROJINP = 1
  set PROJ_ID = "$LISTID[1]"
else
  set PROJ_ID = "$LISTID[$PROJINP]"
endif

jobinfo:

#####################################################
# Show all info before submitting job
#####################################################

echo "\n      ----- Job Info -----\n"
echo "   Input file  :  $INPUTFILE"
echo "  Output file  :  $OUTPUTFILE"
echo " Compute node  :  $NODES"
echo "    CPU cores  :  $NPROCS"
echo "  OMP Threads  :  $THREADS"
echo "     Job Name  :  $INPUTNAME"
echo "    Job Queue  :  $JOBQUEUE"
echo "    Wall-Time  :  $WALLTIME"
echo "   Project ID  :  $PROJ_ID\n"

echo -n "Submit your job now ? [yes]: "
set SUBMIT = "$<"
if ("null$SUBMIT" == "null" || "null$SUBMIT" == "nully" || "null$SUBMIT" == "nullyes") then
  goto submit
else
  echo "...Quit..."
  exit 0
endif

submit:
set PBS_SCRIPT = "$FULLPATH/submit.G09.$INPUTNAME.sh"

cat <<EOF > $PBS_SCRIPT
#!/bin/bash 

#PBS -l select=${NODES}:ncpus=${NPROCS}:ompthreads=${THREADS}
#PBS -l walltime=$WALLTIME
#PBS -q $JOBQUEUE
#PBS -N $JOBNAME
#PBS -P $PROJ_ID

#############################################################
#### This PBS Pro script was generated by subg09 program ####
#############################################################

module purge
module load gaussian/g09

cd \$PBS_O_WORKDIR

g09 < $INPUTFILE > $OUTPUTFILE

EOF

qsub $PBS_SCRIPT
#echo "Your job has been submitted."
exit 0

inter: 
  echo "\nError: you pressed Ctrl+C ...Quit...\n"
  exit 1


