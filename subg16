#!/bin/csh

# Gaussian 16 Interactive Job Submission on TAIWANIA cluster, NCHC, Taiwan
#
# Updated 20180622  Rangsiman Ketkaew  rangsiman1993@gmail.com
# https://github.com/rangsimanketkaew/QM-on-TAIWANIA/

##############################################################
set G16_DIR      = "/pkg/gaussian/g16/g16"
set G16_EXE      = "$G16_DIR/g16"
##############################################################
set NBO_BIN      = "/pkg/gaussian/nbo6/bin"
##############################################################
set PROJ_ID_FILE = "$HOME/.proj_id"
##############################################################

onintr inter

#Check if help is requested.
if ( "$1" == "-help" || "$1" == "--help" || "$1" == "-h" || "$1" == "help" ) goto help

set GPU = 0

if ( $#argv == 0) then
  echo ""
  echo "   Gaussian 16 R. B01 Interactive Job Submission on TAIWANIA, NCHC, Taiwan"
  echo "   -----------------------------------------------------------------------"
  echo ""
  echo "   Usage: subg16 input[.com] [output[.out]] [-help]"
  echo ""
  echo "   Example: subg16 water_hf"
  echo "            subg16 water_hf.com water_hf_4cores.out"
  echo ""
  exit 0
else
  set INPUTFILE = "$1"
endif

#Check if Gaussian directory exists
if (! -e $G16_DIR) then
  echo "Error: Unable to locate Gaussian 16 directory, $G16_DIR."
  echo "Please set the suitable path of Gaussian 16 at the beginning lines of this program source code."
  exit 1
endif

if (! -e $G16_EXE) then
  echo "Error: Unable to locate g16 executable, please check again."
  exit 1
endif

set INPUTNAME = `basename $INPUTFILE .com`
set REALNAME_INP = "$INPUTNAME".com
set REALPATH = `realpath $REALNAME_INP`
set DIR_PATH = `dirname $REALPATH`
set INPUTFILE = "$DIR_PATH/$INPUTNAME".com
if (! -f $INPUTFILE) then
  echo "Error: Unable to locate $INPUTFILE"
  exit 1
endif

if ("null$2" == "null") then
  set OUTPUTNAME = "$INPUTNAME"
  set OUTPUTFILE = "$DIR_PATH/$INPUTNAME".out
  set REALNAME_OUT = "$INPUTNAME".out
else
  set OUTPUTNAME = `basename $2 .out`
  set OUTPUTFILE = "$DIR_PATH/$OUTPUTNAME".out
  set REALNAME_OUT = "$OUTPUTNAME".out
endif

set JOBNAME = "$OUTPUTNAME"

if ( `grep -ic '%gpucpu' $INPUTFILE` == 1 ) then
  echo "Error: This version of subg16 does not support Gaussian 16 for GPU accelerator."
  exit 1
else

if ( `grep -ic '\-\-link1\-\-' $INPUTFILE` >= 1 ) then
  @ NUMJOB = ( `grep -ic '\-\-link1\-\-' $INPUTFILE` + 1 )
  echo ""
  echo "Warning: $INPUTNAME.com contains $NUMJOB calculations."
endif

if ( `grep -ic '%nprocshared' $INPUTFILE` >= 1 ) then
  set GREPPAT = "%nprocshared"
else if ( `grep -ic '%nprocs' $INPUTFILE` >= 1 ) then
  set GREPPAT = "%nprocs"
else
  echo 'Warning: No %NProcShared specified in input file. Hence, number of CPU cores will be set to 1.'
  set NPROCS = 1
  set JOBQUEUE = serial
  goto set_node
endif

set NPROCS_LIST = ( `grep -i "$GREPPAT" $INPUTFILE | cut -d= -f2` )

set NPROCS = "$NPROCS_LIST[1]"

if ( `echo $NPROCS | grep -c '[a-z][A-Z]'` == 1 ) then
  echo "Error: Number of $GREPPAT specified in input must be positive integer from 1 to 40."
  exit 1
endif

if ( $NPROCS >= 41 ) then
   echo "Warning: Value of $GREPPAT is over 40. So $GREPPAT will be set to 40."
   set NPROCS = 40
endif

if ("null$NPROCS" == "null1") then
  set JOBQUEUE = serial
  goto set_node
endif

check_queue:

echo ""
echo "Optimal job queues: "
echo "  [1]  ctest"
echo "  [2]  cf40"
echo ""

echo -n "Enter job queue [2]: "
set INPQUEUE = "$<"

if ( "null$INPQUEUE" == "null" || $INPQUEUE == 2 ) then
  set JOBQUEUE = cf40
else if ( $INPQUEUE == 1 ) then
  set JOBQUEUE = ctest
else
  echo "Error: Your choice is incorrect."
  goto check_queue
endif

set_node:
set NODES = 1
set THREADS = "$NPROCS"

set LISTID = ( `get_su_balance | awk -F, '{print $2}' | xargs` )

if ( "$LISTID" == "" ) then
  echo "Error: No available Project ID."
  exit 1
else if ( $#LISTID == 1 ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( -f $PROJ_ID_FILE ) then
  set PROJID_1 = `head -1 $PROJ_ID_FILE`
  if ( `get_su_balance | grep -wc "$PROJID_1"` == 0 ) then
    echo "Error: Project ID specified in first line of $PROJ_ID_FILE is not correct."
    exit 1
  endif
  set PROJ_ID = "$PROJID_1"
  goto jobinfo
endif

set BALANCE = ( `get_su_balance | awk -F, '{print $1}' | xargs` )
echo ""
echo " Your available Project ID & SU Balance:"
@ i = 1
while ( $i <= $#LISTID )
echo " [$i]  $LISTID[$i]  $BALANCE[$i]"
set PROJ_ID = "$LISTID[1]"
@ i++
end
echo ""

ask_id_choice:
echo -n "Enter Project ID [1]: "
set PROJINP = "$<"

if ( "null$PROJINP" == "null" ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( `echo $PROJINP | grep -c '[a-z][A-Z]*'` == 1 ) then
  echo "Error: Please assign choice as positive integer."
  goto ask_id_choice
endif

if ( $PROJINP > $#LISTID || $PROJINP <= 0 ) then
  echo "Error: Choice you selected is out of range."
  goto ask_id_choice
else
  set PROJ_ID = "$LISTID[$PROJINP]"
endif

jobinfo:

#####################################################
# Show all info before submitting job
#####################################################

echo ""
echo " =========================== $ Job Information $ =========================="
echo " Run on `date` by `whoami`"
echo ""
echo " Gaussian 16        = $G16_EXE"
echo " Working directory  = $DIR_PATH"
echo ""
echo " Input file         = $REALNAME_INP"
echo " Output file        = $REALNAME_OUT"
echo ""
echo " Compute node       = $NODES"
echo " CPU cores          = $NPROCS"
echo " OMP Threads        = $THREADS"
echo " Job Name           = $OUTPUTNAME"
echo " Job Queue          = $JOBQUEUE"
echo " Project ID         = $PROJ_ID"
echo " =========================== $ Job Information $ =========================="
echo ""

echo -n "Submit your job now ? [yes]: "
set SUBMIT = "$<"
if ("null$SUBMIT" == "null" || "null$SUBMIT" == "nully" || "null$SUBMIT" == "nullyes") then
  goto submit
else
  echo "...Quit..."
  exit 0
endif

submit:
set PBS_SCRIPT = "$DIR_PATH/submit.G16.$OUTPUTNAME.sh"

cat <<EOF > $PBS_SCRIPT
#!/bin/bash 

#PBS -l select=${NODES}:ncpus=${NPROCS}:ompthreads=${THREADS}
#PBS -q $JOBQUEUE
#PBS -N $JOBNAME
#PBS -P $PROJ_ID

#############################################################
#### This PBS Pro script was generated by subg16 program ####
#############################################################

module purge

cd \$PBS_O_WORKDIR

export SCRATCH_DIR=/work1/$USER/SCRATCH/g16/g16.pbs\${PBS_JOBID/\.srvc1/}
if [ ! -d \$SCRATCH_DIR ]; then mkdir -p \$SCRATCH_DIR; fi

export g16root="$G16_DIR"
. \$g16root/bsd/g16.profile
export PATH="${NBO_BIN}:\$PATH"
export GAUSS_SCRDIR="\$SCRATCH_DIR"
export GAUSS_EXEDIR="\$g16root/"
export GAUSS_EXECUT="\$g16root/g16"

export DIR_PATH="$DIR_PATH"

\$GAUSS_EXECUT < \
\$DIR_PATH/$REALNAME_INP > \
\$DIR_PATH/$REALNAME_OUT

EOF

qsub $PBS_SCRIPT
#echo "Your job has been submitted."
exit 0

help:
clear
cat << EOF | less

                                        --------------------------------------
                                        Gaussian 16 Interactive Job Submission
                                        --------------------------------------

======
subg16
======

subg16 is used to submit shared-memory Gaussian 16 calculation on a single node.

This version of subg16 does not support GP-GPU accelerator.

subg16 determines the number of OMP threads by the value of %nprocs line in input file.
Sensible value of %nprocs are: 1, 2, 4, 8, 12, 16, 24, 32, and 36.

TAIWANIA Policy: Max value of %nprocs is 40.
                 If %nprocs is set to 1, G09 job will be submitted in serial queue.
                 If %nprocs is 2 through 40, G09 job will be submitted in cf40 queue.


======
AUTHOR
======

Rangsiman Ketkaew (MSc student)
E-mail: rangsiman1993@gmail.com
Computational Chemistry Research Unit
Department of Chemistry
Faculty of Science and Technology
Thammasat University, Thailand

EOF

inter: 
  echo ""
  echo "Error: you pressed Ctrl+C ...Quit..."
  echo ""
  exit 1


