#!/bin/csh

# ORCA 4.0.1.2 Interactive PBS Pro Job Submission
# on Taiwania cluster, NCHC, Taiwan
#
# Updated 20180622  Rangsiman Ketkaew  rangsiman1993@gmail.com
# https://github.com/rangsimanketkaew/PBS-submission/

##############################################################
set ORCA_TOP = "/pkg/orca/orca.4.0.1.2"
set ORCA_VER = "4.0.1.2"
##############################################################
set PROJ_ID_FILE = "$HOME/.proj_id"
##############################################################

onintr inter

if ($#argv == 0) then

echo ""
echo "   ORCA 4.0.1.2 Interactive PBS Job Submission on TAIWANIA, NCHC, Taiwan"
echo "   ---------------------------------------------------------------------"
echo ""
echo "   Usage: suborca input [output]"
echo ""
echo "                    |"
echo "                    |--> ORCA input file with or without .inp extension."
echo ""
echo "   suborca detects number of MPI processes from value of 'PALn' keyword,"
echo "   where n is sensible positive integer, in keyword line of input file."
echo "   For example, \!B3LYP def2-SVP Opt PAL4 is requesting 4 MPI processes"
echo "   for geometry optimization calculation using B3LYP/def2-SVP method."
echo ""
exit 0

else if ($#argv == 1 || $#argv == 2) then
  set INPUTFILE = "$1"

else if ($#argv > 2) then

  echo "Error: Too many arguments"
  exit 1

endif

if (! -e $ORCA_TOP) then
  echo 'Error: Unable to locate ORCA top directory, please set $ORCA_TOP environment variable'
  exit 1
endif

if ("null$INPUTFILE" == "null") then
  echo "Error: Please enter input file."
  exit 1
endif

set USERINP = `basename $INPUTFILE .inp`
set INPUTNAME = "$USERINP".inp
set REALPATH = `realpath $INPUTNAME`
set FULLPATH = `dirname $REALPATH`
set INPUTFILE = "$FULLPATH/$USERINP".inp
if (! -f $INPUTFILE) then
  echo "Error: Unable to locate $INPUTFILE"
  exit 1
endif

if ("null$2" == "null") then
  set OUTPUTFILE = "$FULLPATH/$USERINP".out
else
  set OUTPUTNAME = `basename $2 .out`
  set OUTPUTFILE = "$FULLPATH/$OUTPUTNAME".out
endif

if ( `grep -c '^!' $INPUTFILE` == "" ) then
  echo "Error: No keyword line in input file. The keyword line must start with ! flag."
  exit 1
endif

# w = match whole word, i = ignore case, o = number of occurrence
set NUMPAL = `grep '^!' $INPUTFILE | egrep -wio 'pal[1-9]+' | wc -l`

if ( $NUMPAL == 0 ) then
  set CPUS = 1
  set JOBQUEUE = serial
  set WALLTIME = "96:00:00"
  goto jobname
else if ( $NUMPAL == 1 ) then
  set CPUS = `grep '^!' $INPUTFILE | egrep -wio 'pal[1-9]+' | sed -e 's/pal//I'`
  if ( "null$CPUS" == "null" ) then
    echo "Error: Please assign value of MPI processes, e.g. PAL4 or PAL8."
    exit 1
  endif
else if ( $NUMPAL > 1 ) then
  echo "Error: There is more than one 'PALn' keyword in keyword line."
  exit 1
endif

if ( $CPUS == 1 ) then
  set CPUS = 1
  set JOBQUEUE = serial
  set WALLTIME = "96:00:00"
else if ( $CPUS >= 2 && $CPUS <= 40 ) then
  set JOBQUEUE = cf40
  set WALLTIME = "96:00:00"
else if ( $CPUS > 40 ) then
  echo ""
  echo "Warning: Number of MPI processes is over 40. Hence, it will be set to 40."
  set CPUS = 40
  set JOBQUEUE = cf40
  set WALLTIME = "96:00:00"
endif

jobname:
set MPIPROCS = "$CPUS"
set NODES = 1
set THREADS = 1
set JOBNAME = "$USERINP"

set LISTID = ( `get_su_balance | awk -F, '{print $2}' | xargs` )

if ( "$LISTID" == "" ) then
  echo "Error: No available Project ID."
  exit 1
else if ( $#LISTID == 1 ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( -f $PROJ_ID_FILE ) then
  set PROJID_1 = `head -1 $PROJ_ID_FILE`
  if ( `get_su_balance | grep -wc "$PROJID_1"` == 0 ) then
    echo "Error: Project ID specified in first line of $PROJ_ID_FILE is not correct."
    exit 1
  endif
  set PROJ_ID = "$PROJID_1"
  goto jobinfo
endif

set BALANCE = ( `get_su_balance | awk -F, '{print $1}' | xargs` )
echo ""
echo " Your available Project ID & SU Balance:"
@ i = 1
while ( $i <= $#LISTID )
echo " [$i]  $LISTID[$i]  $BALANCE[$i]"
set PROJ_ID = "$LISTID[1]"
@ i++
end
echo ""

ask_id_choice:
echo -n "Enter Project ID [1]: "
set PROJINP = "$<"

if ( "null$PROJINP" == "null" ) then
  set PROJ_ID = "$LISTID[1]"
  goto jobinfo
endif

if ( `echo $PROJINP | grep -c '[a-z][A-Z]*'` == 1 ) then
  echo "Error: Please assign choice as positive integer."
  goto ask_id_choice
endif

if ( $PROJINP > $#LISTID || $PROJINP <= 0 ) then
  echo "Error: Choice you selected is out of range."
  goto ask_id_choice
else
  set PROJ_ID = "$LISTID[$PROJINP]"
endif

jobinfo:

#####################################################
# Show all info before submitting job
#####################################################

echo ""
echo "      ----- Job Info -----"
echo ""
echo "    Input file  :  $INPUTFILE"
echo "   Output file  :  $OUTPUTFILE"
echo "  Compute node  :  $NODES"
echo "     CPU cores  :  $CPUS"
echo " MPI processes  :  $MPIPROCS"
echo "   OMP Threads  :  $THREADS"
echo "      Job Name  :  $JOBNAME"
echo "     Job Queue  :  $JOBQUEUE"
echo "     Wall-Time  :  $WALLTIME"
echo "    Project ID  :  $PROJ_ID"
echo ""

echo -n "Submit your job now ? [yes]: "
set SUBMIT = "$<"
if ("null$SUBMIT" == "null" || "null$SUBMIT" == "nully" || "null$SUBMIT" == "nullyes") then
  goto submit
else
  echo "...Quit..."
  exit 0
endif

submit:
set PBS_SCRIPT = "$FULLPATH/submit.ORCA.$USERINP.sh"

cat <<EOF > $PBS_SCRIPT
#!/bin/bash 

#PBS -l select=${NODES}:ncpus=${CPUS}:mpiprocs=${MPIPROCS}
#PBS -l walltime=$WALLTIME
#PBS -q $JOBQUEUE
#PBS -N $JOBNAME
#PBS -P $PROJ_ID

##############################################################
#### This PBS Pro script was generated by suborca program ####
##############################################################

module load gcc/6.3.0

cd \$PBS_O_WORKDIR

export ORCA_TOP=${ORCA_TOP}
export LD_LIBRARY_PATH="/usr/lib64:\$ORCA_TOP/../lib:\$ORCA_TOP/../openmpi-3.1.0-gcc6/lib:\$ORCA_TOP:\$LD_LIBRARY_PATH"
export ORCA_SCRATCH_DIR=/work1/$USER/SCRATCH/orca/pbs.\${PBS_JOBID/\.srvc1/}
export PATH="\$ORCA_TOP/../openmpi-3.1.0-gcc6/bin:\$ORCA_TOP:\$PATH"
if [ ! -d \$ORCA_SCRATCH_DIR ]; then mkdir -p \$ORCA_SCRATCH_DIR; fi

cd \$ORCA_SCRATCH_DIR
ln -s $INPUTFILE \$ORCA_SCRATCH_DIR/${USERINP}.inp

$ORCA_TOP/orca \$ORCA_SCRATCH_DIR/${USERINP}.inp > $OUTPUTFILE

EOF

qsub $PBS_SCRIPT
#echo "Your job has been submitted."
exit 0

inter: 
  echo ""
  echo "Error: you pressed Ctrl+C ...Quit..."
  echo ""
  exit 1


